<?php
/**
 * @file
 * jobs content type information  
 * jobs multistep form module 
 *
 */

module_load_include('inc', 'jobs', 'includes/jobs_form_validate');
module_load_include('inc', 'jobs', 'includes/jobs_review_resend_form');
module_load_include('inc', 'jobs', 'includes/jobs_review_resend_submit');

/**
 *
 * Implements hook_node_info();
 *
 */

function jobs_node_info() {
  return array(
  'jobs' => array(
    'name' => 'jobs',
    'base' => 'jobs',
    'description' => t('Jobs'),
    'has_title' => TRUE,
    'title_label' => 'jobs',
    ),
  );
}

/**
 *
 * Implements hook_form();
 *
 */
function jobs_form($node, $form_state) {
  return node_content_form($node, $form_state);
}

/**
 *
 * Implements hook_views_api();
 *
 */

function jobs_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'jobs') . '/includes/views',
    'template path' => drupal_get_path('module', 'jobs') . '/themes',
  );
}

/**
 * Page callback: renders a form .
 *
 * @param string jobid
 * 
 *   job id of a respective job .
 *
 * @return array
 *   A render array for a jobs multistep form.
 *
 * @see node_menu()
 */

function jobs_menu() {
  $items = array();
  $items['apply/jobid/%'] = array(
    'title' => 'Submit your Resume',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('jobs_steps_form', (2)),
    'access arguments' => array('access content'),
    'file' => 'includes/jobs_form.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  $items['recieved_applications'] = array(
    'title' => 'all applicants details',
    'page callback' => 'jobs_recieved_applications',
    'access arguments' => array('access content'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['applicant_details/%'] = array(
    'title' => 'Candidate details',
    'page callback' => 'applicant_details',
    'page arguments' => array((1)),
    'access arguments' => array('access content'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['recieved_application/jobs/%'] = array(
    'title' => 'all filter',
    'page callback' => 'candidate_details',
    'page arguments' => array((1)),
    'access arguments' => array('access content'),
    'type' => MENU_NORMAL_ITEM,
  );
 $items['sites/default/files/resume/%'] = array(
    'page callback' => '_file_download',
    'page arguments' => array(4),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Form constructor for the multi step form.
 *
 * @param array $form
 *    form elements to dispaly .
 * 
 * @param array $form_state
 *    The form state array  .
 *
 * @see hook_form()
 * @see hook_form_validate()
 * @see hook_form_submit()
 *
 * @ingroup forms
 */

function jobs_steps_form($form, &$form_state) {
if (!isset($form_state['stage'])) $form_state['stage'] = 'personal_details';
  $form = array();
  $form = jobs_steps_navigation($form, $form_state);
  switch ($form_state['stage']) { 
   case 'personal_details': 
     return  jobs_steps_personal_details($form, $form_state);
     break;      
   case 'job_details':  
     return  job_details_form($form, $form_state);
     break;
   case 'uploadresume':  
     return  steps_uploadresume_form($form, $form_state);
     break;
   case 'review_resend':  
     return steps_review_resend_form($form, $form_state); 
     break;
  }
}

/**
 *
 * 
 */

function job_details_move_to_next_stage($form, &$form_state) {
  switch ($form_state['stage']) {
    case 'personal_details':
      return 'job_details';
    case 'job_details':
      return 'uploadresume';       
      break;
    case 'uploadresume':
      return 'review_resend';
      break;
  }
}

/**
 *
 * 
 */

function job_details_move_to_previous_stage($form, &$form_state) {
  switch ($form_state['stage']) {
    case 'job_details':
      return 'personal_details';
      break;
    case 'uploadresume':
      return 'job_details';
      break;
    case 'review_resend':
      return 'uploadresume';
      break;
  }

}

/**
 *
 * 
 */

function jobs_steps_navigation($form, &$form_state) {
 $form_state['stage'] = isset($form_state['stage']) ? $form_state['stage']:'personal_details';
    $form_stages = array(
    'personal_details' => 'personal_details',
    'job_details' => 'job_details',
    'uploadresume' => 'uploadresume',
    'review_resend' => 'review_resend',
  );  
 if (isset($form_stages[$form_state['stage']])) {
   $current_step = $form_state['stage'];
 } 
 else {
   $current_step =  'personal_details';
 }
 
 $stages = array(
   'personal_details' => array('data' => 'personal_details'),
   'job_details' => array('data' => 'job_details'),  
   'uploadresume' => array('data' => 'uploadresume'),
   'review_resend' => array('data' => 'review_resend'),
 ); 
 $stages[$current_step]['class'] = array('active');
 
 $stages_list = theme('item_list', array('items' => $stages));
 $form['header'] = array(
   '#type' => 'fieldset',
   '#title' => 'breadcrumb',
   '#list' => $stages_list,
 );

return $form;
}

/**
 * Form validation handler for jobs_steps_form().
 *
 * @see user_login_form_validate()
 */

function jobs_steps_form_validate($form, &$form_state) {
if ($form_state['triggering_element']['#value'] == 'Back') {
   return;
 }
   switch ($form_state['stage']) { 
   case 'personal_details': 
     return  jobs_steps_personal_details_validate($form, $form_state);
     break;      
   case 'job_details':  
     return  job_details_validate($form, $form_state);
     break;
   case 'uploadresume':  
     return  steps_uploadresume_validate($form, $form_state);
     break;
   case 'review_resend':  
     return steps_review_resend_validate($form, $form_state); 
     break;
  }
}

/**
 * Form submission handler for jobs_steps_form().
 *
 * @see hook_form_validate()
 */
function jobs_steps_form_submit($form, &$form_state) {
 switch ($form_state['stage']) {
   case 'review_resend':
     $form_state['multistep_values'][$form_state['stage']] = $form_state['values'];
     if ($form_state['triggering_element']['#value'] != 'Back') {
       steps_review_resend_submit($form, $form_state);
     }  
     break; 
   default:  
       $form_state['multistep_values'][$form_state['stage']] = $form_state['values'];
        $form_state['new_stage'] = job_details_move_to_next_stage($form, $form_state);
   break;
 }
 
 if (isset($form_state['complete'])) {
     drupal_goto('apply/jobid/' . $form_state['build_info']['args']['0']);
  }


  if ($form_state['triggering_element']['#value'] == 'Back') {
    $form_state['new_stage'] = job_details_move_to_previous_stage($form, $form_state);
// print_r($form_state['new_stage']);  exit;
  } 

  if (isset($form_state['multistep_values']['form_build_id'])) {
    $form_state['values']['form_build_id'] = $form_state['multistep_values']['form_build_id'];
  }
  $form_state['multistep_values']['form_build_id'] = $form_state['values']['form_build_id'];
  $form_state['stage'] = $form_state['new_stage'];
  $form_state['rebuild'] = TRUE;
}

/**
 *
 * 
 */

function jobs_recieved_applications() {
  $result = db_select('jobs', 'j');
  $result->join('node', 'n', 'j.job_id = n.nid');
  $result->fields('n', array('title', 'nid'))
     ->fields('j', array('aplicant_id', 'first_name', 'last_name', 'mobile', 'resume'));
   $query = $result->execute()->fetchAll();
  $header = array('job title', ' Name',  'Mobile', 'resume' );
  $rows = array();
 if (isset($query) && !empty($query)) {
  foreach ($query as $key => $value) {
     if (isset($value->resume) && !empty($value->resume))
     $imgpath = file_load($value->resume);
     $rows[] = array(
       '<a href=' . base_path() . 'node/' . $value->nid . '> ' . $value->title . '<a>',
     '<a href=' . base_path() . 'applicant_details/' . base64_encode($value->aplicant_id) . '> ' . $value->first_name . ' ' . $value->last_name . '</a>', 
       $value->mobile, 
       l($imgpath->filename, file_create_url($imgpath->uri)));
  }
 return theme('table', array('header' => $header, 'rows' => $rows));
 } else {
  drupal_set_message(t('No result found'));
return '';
 }
}

/**
 *
 * 
 */

function _file_download($file_name) {
  header("Cache-Control: public");
  header("Content-Type: application/octet-stream");
  header("Cache-Control: no-store, no-cache, must-revalidate");
  header("Cache-Control: post-check=0, pre-check=0");
  header('Content-Disposition: attachment; filename="' . $file_name . '";');
  header("Content-Transfer-Encoding: binary");
  readfile($file_name);
  drupal_exit();
}



/**
 * Returns HTML for a applicant.
 *
 * @param array $variables
 *   An associative array containing:
 *   - content: The foo object that is being formatted.
 *
 * @ingroup themeable
 */

function jobs_theme($existing, $type, $theme, $path) {
  $theme = array();
  $theme['applicant_listing'] = array(
        'render element' => 'content',
        'base hook' => 'jobs',
        'template' => 'applicant_listing',
        'path' => drupal_get_path('module', 'jobs') . '/themes/templates',
       );
  return $theme;
}


/**
 *
 * 
 */  

function applicant_details($applicant_id) {
  $result = db_select('jobs', 'j');
  $result->join('node', 'n', 'j.job_id = n.nid');
  $result->fields('n', array('title', 'nid'))
     ->fields('j', array('aplicant_id', 'first_name', 'last_name', 'date_of_birth', 'mobile', 'name_of_the_institution', 'qualification', 'fixed_compensation', 'variable_compensation', 'current_location', 'permanent_location', 'company', 'years_of_experience', 'notice_period', 'current_role', 'candidate_ex_employee_check', 'resume', 'cover_letter'))
     ->condition('j.aplicant_id', base64_decode($applicant_id), '=');
 $query = $result->execute()->fetchAll();
 return theme('applicant_listing', array('result' => $query));
}

