<?php
/**
 *
 * @file
 * 
 *
 */

function cropimage_field_info_alter(&$info) {
//  dprint_r($info['image']);  exit;
}

function cropimage_form_alter(&$form, &$form_state, $form_id) {
// dprint_r($form);  exit;
  if (isset($form['#field']['type']) && ( $form['#field']['type']== 'image')) {
 
  $form['crop_required_' . $form['#field']['field_name']] = array(
      '#title' => t('click here to crop the image from center'),
      '#description' => t('On select of this the uploaded images are croped Xpx and Ypx from center'),
      //'#default' => variable_get('crop_required_' . $form['#field']['field_name']),
      '#default_value' => variable_get('crop_required_' . $form['#field']['field_name'], 0),
      '#type' => 'checkbox',
    );

  $field = 'input[name="crop_required_' . $form['#field']['field_name'] . '"]';

  $form['X_' . $form['#field']['field_name']] = array(
      '#title' => t('Please enter X value'),
      '#type' => 'textfield',
      '#default_value' => variable_get('X_' . $form['#field']['field_name']),
      '#maxlength' => 5,
      '#attributes' => array(
        'pattern' => '[0-9]+',
        'placeholder' => 'Numbers only',
      ),
      '#size' => 10,
      '#states' => array(
        '#required'  => array(
          $field => array(
	        'checked' => TRUE,
            ),
        ),
        'visible' => array(
          $field => array(
	    'checked' => TRUE,
          ),           
 	),
      ),
    );
  $form['Y_' . $form['#field']['field_name']] = array(
      '#title' => t('Please enter Y value'),
      '#type' => 'textfield',
      '#default_value' => variable_get('Y_' . $form['#field']['field_name']),
      '#maxlength' => 5,
      '#attributes' => array(
        'pattern' => '[0-9]+',
        'placeholder' => 'Numbers only',
      ),
      '#size' => 10,
      '#states' => array(
        '#required'  => array(
          $field => array(
	        'checked' => TRUE,
            ),
        ), 
        'visible' => array(
          $field => array(
	        'checked' => TRUE,
          ),           
 	    ),
      ),
    );
    $form['#validate'][] = 'cropimage_validate_function';
    $form['#submit'][] = 'cropimage_form_submit';
  }
  $form['#submit'][] = 'cropimage_remove_fields';
}

function cropimage_validate_function($form, &$form_state) {
  if (isset($form_state['values']['X_' . $form['#field']['field_name']] ) && !is_numeric($form_state['values']['X_' . $form['#field']['field_name']]) ) {
    //  form_set_error('my_element', 'This is the error message that will be displayed.');
	  form_set_error($form['X_' . $form['#field']['field_name']], 'Please enter numeric ');
    }
   
  
  if (isset($form_state['values']['Y_' . $form['#field']['field_name']] ) && !is_numeric($form_state['values']['Y_' . $form['#field']['field_name']]) ) {
	  form_set_error($form['Y_' . $form['#field']['field_name']], 'Please enter numeric ');
  }
}

function cropimage_form_submit($form, &$form_state) {
  if (isset($form_state['values']['crop_required_' . $form['#field']['field_name']]) && $form_state['values']['crop_required_' . $form['#field']['field_name']] == '1' ) {
    variable_set( 'crop_required_' . $form['#field']['field_name'], $form_state['values']['crop_required_' . $form['#field']['field_name']]);
    variable_set( 'X_' . $form['#field']['field_name'], $form_state['values']['X_' . $form['#field']['field_name']]);
    variable_set( 'Y_' . $form['#field']['field_name'], $form_state['values']['Y_' . $form['#field']['field_name']]); 
    /**	
	$result = db_select('variable', 'v')
    ->fields('v')
    ->execute()
    ->condition('v.name','crop_required_' . $form['#field']['field_name']  , '=')
    ->condition('v.value', 1 , '=')
    ->fetchAssoc();
    
    if (isset($result)  && !empty($result) ) {
	 db_update('variable', 'v') // Table name no longer needs {}
      ->fields(array(
       'v.value' => $form_state['value']['X_' . $form['#field']['field_name']],
     ))
      ->condition('v.name', 'X_' . $form['#field']['field_name'] , '=')
      ->execute();
     db_update('variable', 'v') // Table name no longer needs {}
      ->fields(array(
       'v.value' => $form_state['value']['Y_' . $form['#field']['field_name']],
     ))
      ->condition('v.name', 'Y_' . $form['#field']['field_name'] , '=')
      ->execute();
    }
	 
    db_insert('variable')->
       fields( array(
         'name' => 'crop_required_' . $form['#field']['field_name'] ,
         'value' => $form_state['value']['crop_required_' . $form['#field']['field_name']],
         )
       )->
       fields( array(
         'name' => 'X_' . $form['#field']['field_name'] ,
         'value' => $form_state['value']['X_' . $form['#field']['field_name']],
         )
       )->
       fields( array(
         'name' => 'Y_' . $form['#field']['field_name'] ,
         'value' => $form_state['value']['Y_' . $form['#field']['field_name']],
       )
     );
    */
  }     
}


function cropimage_remove_fields($form, &$form_state) {
  // dprint_r($form);  exit;	
  
  if (isset($form_state['values']['crop_required_' . $form['#field']['field_name']]) && $form_state['values']['crop_required_' . $form['#field']['field_name']] == '0' ) {
    variable_set( 'crop_required_' . $form['#field']['field_name'], 0);
    variable_set( 'X_' . $form['#field']['field_name'], 0);
    variable_set( 'Y_' . $form['#field']['field_name'], 0); 
  
   /**
    $result = db_select('variable', 'v')
    ->fields('v')
    ->execute()
    ->condition('v.name','crop_required_' . $form['#field']['field_name']  , '=')
    ->condition('v.value', 1 , '=')
    ->fetchAssoc();
    if(isset($result) && !empty($result) ) {
	db_delete('variable', 'v')
    ->condition('v.name', 'crop_required_' . $form['#field']['field_name'] )
    ->execute();
	db_delete('variable', 'v')
    ->condition('v.name', $form_state['value']['X_' . $form['#field']['field_name']])
    ->execute();
	db_delete('variable', 'v')
    ->condition('v.name', $form_state['value']['Y_' . $form['#field']['field_name']])
    ->execute();        	
    }
  */     
  } 
      
}
/*
function cropimage_file_insert($file) {
  //dprint_r($file);  exit;
  $field_instance = field_info_instance('node');
  //$xx = field_info_instance();
  dprint_r($field_instance);  exit;
  if () {
    $x = variable_get();
    $y = variable_get();
    image_crop($file, $x, $y);
  }
  
}
*/

/**
function cropimage_node_view($node, $view_mode, $langcode)  {
  dprint_r($node);  exit;
}
*/
function cropimage_node_view($node, $view_mode, $langcode) {
 //dprint_r($node); 
	   
	 
 /** 
  * ->field_uploadimage_for_croping 
  * $node->content ['my_additional_field'] = array(
    '#markup' => $additional_field,
    '#weight' => 10,
    '#theme' => 'mymodule_my_additional_field',
  ); */
}

function cropimage_node_insert($node) {
	
	//echo 'hai';  exit;
 /** $node->content ['my_additional_field'] = array(
    '#markup' => $additional_field,
    '#weight' => 10,
    '#theme' => 'mymodule_my_additional_field',
  ); */
}

function cropimage_node_presave($node) {
	//dprint_r($node);  exit; 
	//echo 'hai3';  exit;
 /** $node->content ['my_additional_field'] = array(
    '#markup' => $additional_field,
    '#weight' => 10,
    '#theme' => 'mymodule_my_additional_field',
  ); */
}


function cropimage_node_update($node) {
 // echo 'hai4';  exit;
 /** $node->content ['my_additional_field'] = array(
    '#markup' => $additional_field,
    '#weight' => 10,
    '#theme' => 'mymodule_my_additional_field',
  ); */
}


function cropimage_node_load($nodes, $types) {
//	echo 'hai5';  exit;
 /** $node->content ['my_additional_field'] = array(
    '#markup' => $additional_field,
    '#weight' => 10,
    '#theme' => 'mymodule_my_additional_field',
  ); */
}

/**
function cropimage_node_view(&$build) {
  dprint_r($build); exit; 
}
*/

/**
function cropimage_node_view_alter(&$build) {
  dprint_r($build); exit; 
}
*/

function cropimage_entity_view_alter(&$build, $type) {
  $result = db_query('SELECT v.name FROM {variable} v WHERE v.name like :name and v.value like :value' , array(
  ':name' => "crop_required_%" ,  
  ':value' => "%1%" 
  ))->fetchAssoc();
  // dprint_r($build['field_uploadimage_for_croping']['#object']->['field_uploadimage_for_croping']); exit;
  if (in_array( 'crop_required_field_uploadimage_for_croping' ,$result)) {
   $x = variable_get( 'X_field_uploadimage_for_croping');
   $y = variable_get( 'Y_field_uploadimage_for_croping');
   $width =  $build['field_uploadimage_for_croping']['#object']->field_uploadimage_for_croping['und']['0']['width'];
   $height = $build['field_uploadimage_for_croping']['#object']->field_uploadimage_for_croping['und']['0']['height'];
   // dprint_r($build['field_uploadimage_for_croping']['#object']);
   $par = array(
    $x, $y, $width, $height
   );
   // imagecrop(file_create_url($build['field_uploadimage_for_croping']['#object']->field_uploadimage_for_croping['und']['0']['uri']), $par);
   // imagecrop ( resource $image , array $rect )
   // image_crop();
   //  dprint_r($build[0]); exit;	
 }
}
