<?php
/**
 *
 * @file
 * 
 *
 */

function cropimage_field_info_alter(&$info) {
//  dprint_r($info['image']);  exit;
}

function cropimage_form_alter(&$form, &$form_state, $form_id) {
// dprint_r($form);  exit;
  if (isset($form['#field']['type']) && ( $form['#field']['type']== 'image')) {
 
  $form['crop_required_' . $form['#field']['field_name']] = array(
      '#title' => t('click here to crop the image from center'),
      '#description' => t('On select of this the uploaded images are croped Xpx and Ypx from center'),
      //'#default' => variable_get('crop_required_' . $form['#field']['field_name']),
      '#default_value' => variable_get('crop_required_' . $form['#field']['field_name'], 0),
      '#type' => 'checkbox',
    );

  $field = 'input[name="crop_required_cropimage_' . $form['#field']['field_name'] . '"]';

  $form['X_cropimage_' . $form['#field']['field_name']] = array(
      '#title' => t('Please enter X value'),
      '#type' => 'textfield',
      '#default_value' => variable_get('X_cropimage_' . $form['#field']['field_name']),
      '#maxlength' => 5,
      '#attributes' => array(
        'pattern' => '[0-9]+',
        'placeholder' => 'Numbers only',
      ),
      '#size' => 10,
      '#states' => array(
        '#required'  => array(
          $field => array(
	        'checked' => TRUE,
          ),
      ),
      'visible' => array(
        $field => array(
	      'checked' => TRUE,
          ),           
 	   ),
     ),
   );
  $form['Y_cropimage_' . $form['#field']['field_name']] = array(
      '#title' => t('Please enter Y value'),
      '#type' => 'textfield',
      '#default_value' => variable_get('Y_cropimage_' . $form['#field']['field_name']),
      '#maxlength' => 5,
      '#attributes' => array(
        'pattern' => '[0-9]+',
        'placeholder' => 'Numbers only',
      ),
      '#size' => 10,
      '#states' => array(
        '#required'  => array(
          $field => array(
	        'checked' => TRUE,
          ),
      ), 
      'visible' => array(
        $field => array(
	      'checked' => TRUE,
        ),
 	  ),
    ),
  );
  $form['#validate'][] = 'cropimage_validate_function';
  $form['#submit'][] = 'cropimage_form_submit';
  }
  $form['#submit'][] = 'cropimage_remove_fields';
}

function cropimage_validate_function($form, &$form_state) {
  if (isset($form_state['values']['X_cropimage_' . $form['#field']['field_name']] ) && !is_numeric($form_state['values']['X_cropimage_' . $form['#field']['field_name']]) ) {
    form_set_error($form['X_cropimage' . $form['#field']['field_name']], 'Please enter numeric ');
  }
  if (isset($form_state['values']['Y_cropimage_' . $form['#field']['field_name']] ) && !is_numeric($form_state['values']['Y_cropimage_' . $form['#field']['field_name']]) ) {
    form_set_error($form['Y_cropimage' . $form['#field']['field_name']], 'Please enter numeric ');
  }
}

function cropimage_form_submit($form, &$form_state) {
  if (isset($form_state['values']['crop_required_cropimage_' . $form['#field']['field_name']]) && $form_state['values']['crop_required_cropimage_' . $form['#field']['field_name']] == '1' ) {
    variable_set( 'crop_required_cropimage_' . $form['#field']['field_name'], $form_state['values']['crop_required_' . $form['#field']['field_name']]);
    variable_set( 'X_cropimage_' . $form['#field']['field_name'], $form_state['values']['X_cropimage_' . $form['#field']['field_name']]);
    variable_set( 'Y_cropimage_' . $form['#field']['field_name'], $form_state['values']['Y_cropimage_' . $form['#field']['field_name']]); 
  }     
}


function cropimage_remove_fields($form, &$form_state) {
  // dprint_r($form);  exit;	
  if (isset($form['#field']['type']) && ( $form['#field']['type']== 'image')) {
  if (isset($form_state['values']['crop_required_cropimage_' . $form['#field']['field_name']]) && $form_state['values']['crop_required_cropimage_' . $form['#field']['field_name']] == '0' ) {
    variable_set( 'crop_required_cropimage_' . $form['#field']['field_name'], 0);
    variable_set( 'X_cropimage_' . $form['#field']['field_name'], 0);
    variable_set( 'Y_cropimage_' . $form['#field']['field_name'], 0); 
  } 
}    
}
function cropimage_node_view($node, $view_mode, $langcode) {
  $content_types =  node_type_get_type($node); 
  if(isset($content_types)  && !empty($content_types)) {
  $results = db_query('SELECT ci.field_name FROM {field_config_instance} ci WHERE ci.bundle = :bundle',
    array( ':bundle' => $content_types->type))->fetchAssoc();
  $fields = array();
   if(isset($results)  && !empty($results) ) {
  foreach ($results as $key => $value) {
    $fields[] = $value;
  }
  
 foreach( $fields as $field ) {
  $result = db_query('SELECT v.name FROM {variable} v WHERE v.name like :name and v.value like :value' , 
  array( ':name' => "crop_required_cropimage_" . $field, ':value' => "%1%"))->fetchAssoc();
   if ($result) {
   $width = variable_get( 'X_cropimage_' . $field );
   $height = variable_get( 'Y_cropimage_' . $field);
   
   $image_field = field_get_items('node', $node, $field);
   if(isset($image_field)  && !empty($image_field)) {
    foreach($image_field  as $image) {
   $filepath = drupal_realpath($image['uri']);
   $image_object = image_load($filepath, $toolkit = FALSE);
 // image_crop($image_object, $x, $y, 250, 250);
   $data = array(
     'width' => $width,
     'height' => $height, 	
   ); 
     cropimage_effect($image_object, $data);
     if(isset($image_object)  && !empty($image_object)) 
     image_save($image_object, $image['uri']); 
     image_path_flush($image['uri']);
      }
     }
    }
   }
  }
 }
}

if ( !function_exists('cropimage_effect') ) {
function cropimage_effect(&$image, $data) {
 if(isset($image)  && !empty($image) ) {	
 $data += array(
    'anchor' => 'center-center',
  );
//  Accepts a keyword (center, top, left, etc) and returns it as a pixel offset.
  list($x, $y) = explode('-', $data['anchor']);
  $x = image_filter_keyword($x, $image->info['width'], $data['width']);
  $y = image_filter_keyword($y, $image->info['height'], $data['height']);
  if (!image_crop($image, $x, $y, $data['width'], $data['height'])) {
    watchdog('image', 'Image crop failed using the %toolkit toolkit on %path (%mimetype, %dimensions)', array('%toolkit' => $image->toolkit, '%path' => $image->source, '%mimetype' => $image->info['mime_type'], '%dimensions' => $image->info['width'] . 'x' . $image->info['height']), WATCHDOG_ERROR);
    return FALSE;
  }
  return TRUE;
 }
}
}
